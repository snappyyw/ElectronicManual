import React from "react";
import ReactPlayer from "react-player";

function Interface() {
  return (
    <div className={"body"}>
      <h1 className="title">Проектирование интерфейса</h1>
      <ReactPlayer
        height="500px"
        width="100%"
        controls="true"
        url="https://www.youtube.com/watch?v=iRL95ghcjso"
      />
      <h3 className={"subtitle"}>Материал к видео:</h3>
      <p className={"text"}>
        На предыдущих занятиях мы создавали оконные формы, внутри которых
        размешали панель. На панели выводили некоторые графические объекты.
      </p>
      <p className={"text"}>
        Сейчас мы научимся добавлять на оконную форму различные элементы
        интерфейса пользователя: надписи, кнопки, текстовые поля, элементы
        прокрутки, меню и др. Т.е. те элементы, которые вы можете видеть на всех
        оконных формах различных приложений.
      </p>
      <p className={"text"}>
        При помощи элементов интерфейса мы создадим новое приложение под
        названием "Калькулятор", которое будет производить некоторые
        арифметические расчеты.
      </p>
      <p className={"text"}>Создадим новый проект.</p>
      <p className={"text"}>
        Весь процесс добавления элементов на форму условно можно разбить на
        следующие шаги:
      </p>
      <p className={"text"}>Шаг 1:</p>
      <p className={"text"}>
        Создается переменная определенного типа (в зависимости от выбранного
        элемента "кнопка", "переключатель", "список" и др.).
      </p>
      <p className={"text"}>Шаг 2:</p>
      <p className={"text"}>
        Задаются свойства элемента (ширина, высота, цвет текста надписи, шрифт и
        др.).
      </p>
      <p className={"text"}>Шаг 3:</p>
      <p className={"text"}>Подключаются обработчики событий.</p>
      <p className={"text"}>Шаг 4:</p>
      <p className={"text"}>
        Созданный элемент отображается на панели, размещенной внутри оконной
        формы JFrame
      </p>
      <p className={"text"}>
        Создадим приложение, которое будет выводить окно определенных размеров,
        внутри которого будет находиться панель В этом окне мы реализуем
        интерфейс калькулятора путем добавления нужных элементов. Нам
        понадобятся в очередной раз три библиотеки: javax.swing*, Java. awt.* и
        java.awt.event*, которые позволят работать с оконными формами, с
        элементами интерфейса пользователя, с элементами графики, обработчиками
        событий и др. В данном приложении нам понадобится единственный
        обработчик события — это обработчик события нажатия на кнопку. Внутри
        метода main создадим новый объект — окно. Новая переменная будет иметь
        тип "okno":
      </p>
      <p className={"text"}>
        Теперь можно перейти к созданию нового класса. Класс будет называться
        "okno" и наследоваться от класса JFrame. Напомним, что если класс
        наследуется от класса JFrame, он сразу же получает весь функционал,
        который есть в классе JFrame.
      </p>
      <p className="text">
        Внутри этого класса создадим конструктор класса (имя конструктора всегда
        совпадает с именем класса), внутри которого укажем начальные
        характеристики окна для отображения его на экране. Характеристики можно
        указать, воспользовавшись уже знакомой командой setBounds:
      </p>
      <p className="text">
        Первые два параметра команды setBounds — это координаты его верхней
        левой угловой точки. Мы поставили значение 0,0, Следовательно, верхний
        левый угол окна буде размещаться четко по левому верхнему углу экрана.
        Третий параметр (600 пикс.) — это ширина окна, а последний, четвертый
        параметр (500 пикс.) — высота окна.
      </p>
      <p className="text">
        Можно установить заголовок окна, воспользовавшись метолом setTitle:
        (Устанавливаем заголовок окна)
      </p>
      <p className="text">
        Чтобы форма окна отображалась на экране, воспользуемся методом
        setVisible со значением "true".
      </p>
      <p className="text">
        Можно запустить программу на исполнение. Если ошибок в программном коде
        нет, то на экране появится окно с названием "Калькулятор", шириной 600
        пикс., высотой 500 пикс., а его верхний левый угол четко совпадет с
        углом экрана, т.е. без отступов сверху и слева.
      </p>
      <p className="text">
        Теперь свяжем панель типа jPanel и оконную форму. Для этого в самом
        начале конструктора класса окна создадим переменную сои типа "continer".
        При помощи метода getContentPanel можно получить в эту переменную
        контент окна. Контент окна — это его содержимое. Переменная типа
        "container" позволяет вложить панель JPanel в нашу оконную форму JFrame.
        <br />
        Теперь создадим переменную pan типа JPanel — это и есть наша панель.
        <br />
        Обратимся к переменной cont, чтобы при помощи метода add добавить панель
        к нашему окну.
      </p>
      <p className="text">
        А теперь нужно создать интерфейс, который необходим для нашего
        калькулятора. Нам понадобятся следующие элементы:
        <br />
        1) кнопки, которые отображают все цифры от 0 до 9
        <br />
        2) кнопки, которые отображают арифметические операции ("+", "-", "*",
        "/");
        <br />
        3) кнопка "Равно";
        <br />
        4) кнопка "Очистить поле";
        <br />
        5) кнопка "Выход";
        <br />
        6) текстовое поле, в котором будет располагаться результат наших
        вычислений.
      </p>
      <p className={"text"}>
        Создадим в классе "okno" несколько переменных, которые будут
        использоваться внутри нашего класса. Первая переменная гехи будет
        закрытой, т.е. доступной только внутри класса и иметь тип JTextArea
        (текстовое поле, в которое пользователь может ввести какой-то текст).
        Переменная text предназначается только для отображения результата
        вычисления, а не для ввода текстовой информации пользователей. Создадим
        две переменные типа "double", которые будут хранить результаты для
        арифметических операций. Арифметические операции у нас будут проводиться
        с двумя числами, Переменная р1 будет хранить первое число, а переменная
        p2 будет хранить второе число (это те числа, которые будет вводить
        пользователь):
      </p>
      <p className={"text"}>
        Предположим, что каждая наша арифметическая операция будет
        соответствовать определенной цифре. Например:
        <br />
        * сложение - 1;
        <br />
        * вычитание - 2;
        <br />
        * умножение - 3;
        <br />
        * деление - 4;
        <br />
        Номер арифметической операции будет хранить переменная oper. Эта
        переменная будет являться переменной целого типа с начальным значением
        0. Когда пользователь будет нажимать на кнопку операции, значение
        переменной будет принимать значение 1, 2, 3 или 4
      </p>
      <p className="text">
        А теперь приступим к реализации интерфейса пользователя. Предположим,
        что на панель можно добавлять элементы формы в произвольном размещении,
        т.е. можно указывать их отступы от краев формы в произвольном виде.
        Такая настройка напоминает размещение тэгов на Выш-странице. Для
        создания настройки воспользуемся методом setLayout со значением "null".
      </p>
      <p className="text">
        Можно также добавить несколько различных шрифтов для кнопок, надписей и
        текстового поля. Чтобы задать шрифт, нам нужно создать переменную типа
        "font" и указать конкретные характеристики шрифта. Создадим новый объект
        с именем переменной Вот и с типом "font".
      </p>
      <p className="text">
        В круглых скобках указаны следующие параметры: "serif" — имя шрифта; 0 —
        стиль отображения (0 - обычный (прямой), 1 - жирный, 2 - курсив и т.
        д.); 20 — размер шрифта. Эти параметры должны быть вам известны по
        использованию различных программ — текстовых, табличных редакторов и др.
        В таких программах можно выбирать шрифт с определенным наименованием,
        можно указывать его размер, стиль. Создадим еще два шрифта.
      </p>

      <p className="text">
        Шрифт btnFont будет использоваться для надписи на кнопках, labFont — для
        вывода текстовых надписей, textFont — для вывода в текстовое поле
        результата арифметических вычислений. Теперь создадим элементы формы —
        кнопки. Кнопка имеет вид JButton. Для создания кнопки, следует задать
        имя переменной и создать новый объект JButton. В круглых скобках (без
        использования кавычек) можно указать ту надпись, которая будет
        выводиться на этой кнопке: Как только переменная JButton будет создана,
        то, обращаясь к этой переменной по имени, можно задавать ее свойства.
        Свойства можно задать с помощью следующих методов.
        <br />
        setSize(а,b) позволяет указать ширину и высоту. В скобках указываются
        значения параметров: а — ширина кнопки, В — высота кнопки
        <br />
        setFont (c) позволяет указать шрифт, который будет использоваться для
        отображения надписи на этой кнопке. В скобках указывается нужный шрифт.
        <br />
        setLocation(а,b) позволяет указать отступы ее верхней угловой точки от
        верхней угловой точки панели.
      </p>
      <p className="text">
        По подобной схеме добавляются различные элементы на оконную форму
        приложения. Большинство элементов интерфейса имеют следующие
        характеристики:
        <br />
        * текстовое представление, например, текстовое представление кнопки —
        это та надпись, которая указывается на ней;
        <br />
        * размеры — ширина и высота;
        <br />
        * шрифт — используется для вывода текстовых надписей;
        <br />
        расположение — отступы от верхней левой части панели, которые необходимы
        для отображения элемента в нужном месте.
      </p>
      <p className="text">
        При помощи метода setLocation нужно указать координаты размещения кнопки
        на панели.
        <br />
        btn[i].setLocation(30, 50 + i*30);
        <br />
        Значение 30 — это отступ в пикселях от левой части панели, Значение
        второго, параметра записано в виде формулы: 50 + Ёх 30, Таким образом,
        отступ от верхней чет доли ля каждой кнопки будет каждый раз
        увеличиваться на 30 пикс. н получится так, что каждая последующая кнопка
        будет находиться ниже, чем предыдущая кнопка.
      </p>
      <p className={"text"}>
        Создадим еше один цикл со счетчиком i, Условие работы цикла, значение
        счетчика увеличивается на 1. Внутри цикла записываем следующую команду:
        обращаемся к массиву btn, в квадратных скобках указав счетчик i, и
        вызываем метод setText(). Внутри метода setText записываем следующую
        конструкцию: ""+i ("" — пустая строка, то есть строка, в которой нег
        символов). Такая форма записи нужна для того, чтобы числовую переменную
        целого типа, которой является у нас счетчик, перевести в строковый тип.
        Дело в том, что метод setText требует, чтобы в его круглых скобках была
        указана переменная типа "string" (строка).
      </p>
      <p className={"text"}>
        Переходим к размещению на форме окна текстовой надписи. Текстовая
        надпись JLabel - надпись, которая выводится на форму. Нам нужно создать
        переменную типа JLabel под Зазванном leb и новый объект типа JLabel. В
        круглых скобках записываются символы которые нужно вывести. Мы выведем
        надпись: "Результат: ".
      </p>

      <p className="text">
        Теперь нам осталось определить текстовое поле для вывода результата. Для
        создания такого поля будем использовать переменную с названием text. Это
        переменная типа "текстовое поле", которая определена в самом вверху
        класса. Поскольку переменная уже определена, можно записать се имя и
        создать новый объект создаем текстовое поле.
        <br />
        text = new JTextArea();
        <br />
        Это объект "многострочное текстовое поле", то есть теоретически оно
        предназначено. для ввода нескольких строк текста.
      </p>
      <p className="text">
        В текстовое поле можно вводить текст. Если вы введете в это поле
        какой-либо текст, то вы увидите, что символы получаются синего цвета,
        т.к. мы указали значение составляющих R, G. - 0, 0 и 100 соответственно.
        В качестве эксперимента, можно изменять значения составляющих — запустив
        приложение после изменения этих значений, вы увидите, что ивет текста
        изменяется. Аналогичные опыты можно провести и с иветом фона, Мы задали
        белый цвет, можно сго изменить и перезапустить приложение.
      </p>
      <p className="text">
        Таким образом, setForeground — это цвет текста, то есть цвет надписи,
        setBackground — это цвет фона. Оба эти метода требуют указания
        определенного цвета. Цвет можно указать, выбрав стандартный цвет из
        перечисления Color, либо с помощью конструктора new color, указав
        значение составляющих R, G, B в круглых скобках.
      </p>
      <p className="text">
        Наш интерфейс калькулятора полностью создан. Нам осталось создать
        функционал нашего приложения — при нажатии на кнопку с изображением
        цифры в текстовом поле должно появляться ее изображение, при нажатии на
        кнопку арифметической операции должны происходить расчеты, при нажатии
        на кнопку "С" текстовое поле должно очищаться и т.д. Но это материал уже
        следующего занятия.
      </p>
    </div>
  );
}

export default Interface;
