import React from "react";
import ReactPlayer from "react-player";

function Lockdown() {
  return (
    <div className={"body"}>
      <h1 className="title">Приложение наблюдения с блокированием экрана</h1>
      <ReactPlayer
        height="500px"
        width="100%"
        controls="true"
        url="https://www.youtube.com/watch?v=nA7ju_H5aac"
      />
      <h3 className={"subtitle"}>Материал к видео:</h3>
      <p>
        Для создания наблюдающего приложения нам нужно будет познакомиться с
        классом Robot, узнать его основное предназначение и принцип работы.
      </p>
      <p>
        Класс Robot позволяет выполнять некоторые действия вместо пользователя
        автоматически. Его основные возможности:
        <br />
        1. Снятие скриншота экрана.
        <br />
        2. Нажатие клавиш клавиатуры.
        <br />
        3. Перемещение курсора мыши.
        <br />
        4. Нажатие клавиш мыши.
      </p>
      <p>
        Первую возможность класса Robot мы изучим на этом занятии, а остальные
        три на следующем.
      </p>
      <p>
        Возможности класса Robot позволяют автоматизировать некоторые действия
        пользователя, Если мы можем с помощью программы перемещать курсор мыши,
        нажимать клавиши мыши и клавиатуры, то можем выполнять обычные действия
        пользователя. Основная сложность заключается в том, что пользователь
        легко распознает экран и понимает в каком именно месте необходимо
        выполнить нажатие клавиши мыши или в какие моменты необходимо нажимать
        нужные клавиши клавиатуры, Для распознавания фрагментов экрана У класса
        Ковой имеется возможность снимать скриншоты экрана. Но само
        распознавание образов — это сложная задача! Из всего этого следует, что
        не очень сложно написать программу, которая откроет браузер, введет
        адрес сайта, перейдет на эгот сайт и введет логин и пароль пользователя,
        Но если на сайте стоит капча (картинка с текстом для защиты эт
        программ-роботов), то войти на сайт без распознавания этой картинки не
        получится, Кроме полезной автоматизации действий пользователя, класс
        Robot, как вы уже догадались. можно использовать в шпионских и
        вредоносных программах.
      </p>
      <p>
        Поговорим немного о компьютерных вирусах и других вредоносных
        программах.
      </p>
      <p>
        Компьютерный вирус — программа, которая способна создавать свои копии,
        заражая другие файлы.
      </p>
      <p>
        Вредоносная программа — программа, которая наносит ущерб компьютеру
        пользователя: удаление файлов, нарушение работы операционной системы итд
      </p>
      <p>
        Шпионская программа (троян) — программа, которая может похищать данные
        пользователя, вести наблюдение за действиями пользователя и т.д.
      </p>
      <p>
        Червь — вирусная программа, которая может распространяться через сети,
        включая интернет,
      </p>
      <p>
        Программа может быть одновременно вирусом, вредоносной программой,
        шпионской программой и червем, если она способна размножаться, в том
        числе через интернет, наносить ущерб пользователю и похищать данные. С
        другой стороны программа может быть полько вредоносной программой и при
        этом нс быть вирусом, если она нс размножается. Возьмем для примера
        блокировщик Windows. Если он только блокирует экран и не даёт
        пользователю работать за компьютером, то это вредительская программа.
      </p>

      <p>
        Если он заряжает другие программы вредоносным кодом, то это еше и вирус.
        Язык Java не лучший вариант для создания вирусов и других подобных
        программ, Хотя бы потому, что программа на Java не запустится, если у
        пользователя не установлена виртуальная машина. Программисту, который
        хочет глубоко погрузится в изучение компьютерных вирусов необходимо
        изучать такие языки как С/С++, Assembler. Это языки программирования не
        для начинающих, поэтому хорошо дя начала использовать „аъ ля создания
        более простых вещей. Несмотря на свои ограничения, Java: позволяет
        создавать много интересных программ подобного рода. Создавать
        вирусоподобные программы можно для изучения этой интересной области.
        Другими словами, создавать с целью изучения и распространять — это
        совершенно разные вещи! Например, разработчик антивирусов должен отлично
        разбираться в создании вирусов. Некоторые полезные программы содержат в
        себе элементы шпионских программ. Программа родительского контроля за
        ребенком, в скрытом режиме, следит за действиями ребенка и отправляет
        информацию на электронную почту родителей. Такую программу можно отнести
        к шпионским программам (троянам). Но в данном случае она выполняет
        полезную миссию,
      </p>
      <p>
        Программу, которую мы создадим на этом занятии также можно отнести к
        шпионским программам и вредительским программам. Но наша с вами задача —
        это изучение и исследование подобных программ!
      </p>
      <p>
        Рассмотрим основные этапы создания блокировщик:
        <br />
        1. Необходимо определить текущее разрешение экрана и вывести окно на
        полный экран.
        <br />
        2. Рамка окна убирается, отключается возможность изменения размеров
        окна.
        <br />
        3. Запускается таймер, который несколько раз в секунду выводит окно
        сверху всех других окон.
        <br />
        4. Блокируется возможность закрытия и сворачивания окна.
      </p>
      <p>
        Таким образом, окно блакировщика перекрывает все остальные окна сверху и
        не даст себя закрыть или свернуть. Обратите внимание, что наше
        блокирующее окно всё же молвы будет сбросить! Но для этого нужно будет
        приложить некоторые усилия, Можно создать, настоящий блокировщик, но сго
        программный код будет сложнее. В рамках данного курсе погрузиться глубже
        в эту тему мы не сможем.
      </p>

      <p>
        Приступим к написанию программного кода нашего приложения. Создадим
        новый проект lesson6 и добавим к нему новый класс prog. Сверху добавим
        необходимые библиотеки.
      </p>
      <p>
        Эти библиотеки мы уже использовали, Стоит отметить, что класс Robot
        находится в java.awt.Robot
      </p>
      <p>
        В нашем приложении всего будет два класса: главный класс prog и класс
        нашего окна myFrame. Добавим внизу класс myFrame и внутри метода main
        создадим объект на основании класса myFrame. Класс myFrame наследуется
        от класса JFrame.
      </p>
      <p>
        Нам понадобится переменная типа Robot для снятия скриншотов экрана
        переменная типа Timer для отсчета времени при снятии скриншотов и для
        поднятия наверх окна блокировщика, счётчик уже сделанных скриншотов и
        переменная типа Frame блокирующего окна.
      </p>
      <p>
        Программный код конструктора класса myFrame() выполнится сразу при
        запуске приложения. И выполнится только один раз.
      </p>
      <p>
        Сначала создаём объект на основании класса Robot. Обратите внимание, что
        объект создаётся внутри конструкции try-catch.
      </p>
      <p>
        Достаточно один раз создать объект типа Robot и потом с его помощью
        много раз выполнять снятие скриншотов экрана, нажатий клавиш,
        перемещения курсора мыши.
      </p>
      <p>
        Далее создаём и запускаем таймер для снятия скриншотов экрана. Таймер
        будет срабатывать через каждые 10 секунд и вызывать метод saveScreen(),
        который выполняет снятие скриншота экрана, а в нужный момент открывает
        блокирующее окно. Обратите внимание, что сам метод saveScreen() мы
        разместим ниже, поэтому на данном этапе он будет подчеркиваться красным
        цветом. Среда разработки сигнализирует о вызове неизвестного метода
        saveScreen(). После добавления этого метода ошибка исчезнет!
      </p>
      <p>После создания таймера размещаются настройки для самого окна.</p>
      <p>
        Обратите внимание, что при закрытии окна указано свойство HIDE_ON_CLOSE.
      </p>
      <p>
        Именно благодаря этому наше окно будет закрываться, а приложение будет
        продолжать работать, После этого открываем окно и сразу его скрываем.
      </p>
      <p>Под конструктором класса расположим метод saveScreen():</p>
      <p>Подсчитываем количество снятых скриншотов экрана.</p>
      <p>
        Количество скриншотов нам понадобится для нумерации файлов. Далее
        определяем ущее разрешение экрана.
      </p>

      <p>
        getScreenSize() — получить размер экрана. Результат попадает в
        переменную типа Dimension, что означает разрешение. В переменные типа
        int получаем ширину и высоту в пикселях. Можно было сделать определение
        размеров экрана один раз при запуске приложения, а потом использовать
        эти значения ширины и высоты. Но возможен случай, когда пользователь
        поменяет разрешение экрана во время работы. Поэтому определяем
        разрешение каждый раз перед снятием скриншота.
      </p>

      <p>
        Обратите внимание, что всё это происходит внутри конструкции try-catch.
        Обращаемся к переменной тина Robot и вызываем метод
        createScreenCapture(). Размеры прямоугольной области Rectangle
        указываются с помощью четырёх параметров: отступ слева, отступ сверху,
        ширина, высота. Параметры имеют тот же смысл, что и в методе setBounds()
        при указании размеров окна. В нашем случае фотографируется весь экран
        полностью, но можно фотографировать любой прямоугольный фрагмент экрана.
        Результат- картинка попадает в переменную img типа BufferdImage —
        изображение. С помощью класса ImageIO, который мы использовали для
        загрузок изображений, сохраняем write() изображение в файл на диске.
        Указывается формат файла и путь к файлу. Мы используем формат PNG.
        Прежде, чем запускать приложение — необходимо создать папку java в корне
        диска C:/. Если вы хотите скрыть скриншоты от пользователя, то можно
        создать папку, в которую пользователь не заглянет случайно. При запуске
        приложения с папке с:\ауа начнут появляться файлы: img1.png, img2.png,
        img3.png итд.
      </p>
      <p>
        Значение переменной kol будет вставляться перед расширением файла .png
        <br />
        Запустим наше приложение и проверим, что в папке с:\java появляются
        файлы.
      </p>
      <p>
        Приложение работает в скрытом режиме. И работать оно будет до выключения
        компьютера. Чтобы его остановить, необходимо запустить Диспетчер задач с
        помощью комбинации клавиш Ctrl+Alt+DEl или другим привычным для вас
        способом. Далее перейти на закладку Процессы и найти в списке процесс
        javaw. Если вы несколько раз запускали приложение, то таких процессов
        может быть несколько! Выбираем процесс javaw и завершаем его.
      </p>
      <p>
        На данном этапе приложение для наблюдения за пользователем завершено. Вы
        можете изменить интервал снятия скриншотов экрана, изменить путь к
        сохраняемым файлам. Будет меньше проблем, если полный путь к папке не
        будет содержать русских букв.
      </p>
      <p>
        Продолжим работу над нашим приложением. У нас есть переменная Kol, с
        помощью которой мы считаем количество сделанных скриншотов. Скриншоты
        создаются каждые 10 секунд. Когда переменная Kol станет равна шести,
        пройдет одна минула. В этот момент вы выведем блокирующее окно. Окно
        будет полупрозрачным и пользователь будет видеть, что под ним. В самом
        конце метода saveScreen(), после блока try-catch, который снимает
        скриншот.
      </p>
      <p>
        Каждый раз снимая скриншот экрана и записывая его в файл, проверяем
        прошедшее время. Если прошла уже одна минута, то таймер останавливаем_
        Это таймер, который отвечает за снятие скриншота каждые 10 секунд. Этот
        же таймер мы будем использовать для блокирующего окна. На этот раз сго
        задача со скоростью 100 раз в секунду поднимать блокировщик поверх всех
        остальных окон.
      </p>
      <p>
        Создаём окно Frame, блокируем возможность изменять размеры окна. Размеры
        окна делаем на полный экран. Цвет фона выбираем красный, Размещаем окно
        сверху других окон. Убираем рамки окна. Устанавливаем прозрачность 50%.
        Далее подключаем обработчик события windowIconified — при сворачивании
        окна. И в момент сворачивания окна вызываем.
      </p>
      <p>
        wnd.SetExtendedState(Frame.MAXIMIZED_BOTH) - эта строка раскрывает окно
        на полный экран. Дело в том, что пользователь может нажать клавиши
        Alt+Пробел и попытаться свернуть наше блокирующее окно. Но в этот момент
        сработает вышеуказанная строка, которая вновь развернёт окно.
      </p>
      <p>После подключения обработчика события — выводим окно.</p>
      <p>
        В данном случае прозрачность установлена в 50% (0.5f) Если установить
        прозрачность всего 1% (0.01f), то блокирующее окно совсем не будет
        видно. Оно как невидимая пленка будет перекрывать для пользователя
        доступ к другим окнам.
      </p>
      <p>
        Если запустить приложение, то через минуту появится прозрачное
        блокирующее окно. Его нельзя свернуть или закрыть. Но такое окно можно
        сбросить, если вызвать Диспетчер задач. Окно Диспетчера задач появится
        поверх блокирующего ока. Поэтому после строки вывода окна, добавим
        таймер, который будет выводить наше окно на передний план 100 раз в
        секунду.
      </p>
      <p>
        Запустим приложение, дождёмся появление блокирующего окна. При вызове
        Диспетчер задач должен остаться под блокирующим окном.
      </p>
      <p>На этом создание приложения завершено.</p>
      <p>
        Как уже говорилось выше — данное блокирующее окно является упрощенной
        моделью блокировщика и его при желании можно сбросить. Один из способов
        — удерживать комбинацию клавиш Ctrl+Shift+Esc — это вызов Диспетчера
        задач. Диспетчер задач будет на короткое время появляться сверху
        блокировщика. Выбираем процесс фазу" и завершаем его. Если убрать
        прозрачность блокирующего окна — это будет сделать сложнее. Ещё один
        способ — это простая перезагрузка компьютера. Если вписать запуск
        блокировщика в автозагрузку (в реестр) для всех пользователей
        компьютера, то перезагрузка уже не поможет. Но в этом случае можно зайти
        в безопасном режиме и удалить запуск блокировщика из автозагрузки. Наша
        упрощенная модель блокировщика даёт представление о том, как пишутся
        подобные приложения.
      </p>
    </div>
  );
}

export default Lockdown;
