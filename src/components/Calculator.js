import React from "react";
import ReactPlayer from "react-player";

function Calculator() {
  return (
    <div className={"body"}>
      <h1 className="title">Создание калькулятора</h1>
      <ReactPlayer
        height="500px"
        width="100%"
        controls="true"
        url="https://www.youtube.com/watch?v=W178q41Jaxk"
      />
      <h3 className={"subtitle"}>Материал к видео:</h3>
      <p className={"text"}>
        Создайте новый проект под названием "lession15", добавьте к этому
        проекту класс "prog", нажмите кнопку "Готово" — у вас откроется
        заготовка программы.
      </p>
      <p className={"text"}>
        Создайте класс под названием "myClass". Внутри этого класса создайте две
        переменные. Одна переменная с именем "v1" будет переменной закрытого
        типа ("private"), а вторая переменная "v2” будет переменной открытого
        типа ("public").
      </p>
      <p className={"text"}>
        Существует такое понятие, как "область видимости переменных", Это та
        часть программного кода, где объявленная переменная доступна, где она
        существует и где она может использоваться.
      </p>
      <p className={"text"}>
        Переменная, которую объявляют в некоторой точке программы, существует до
        ее закрывающей фигурной скобки.
        <br />
        Мы с вами только что объявили две переменные "v1" и "v2", они будуг
        доступны до свой закрывающей фигурной скобки.
      </p>
      <p className="text">
        На прошлом занятии мы создали лишь интерфейс (внешний вид) этого
        приложения, При нажатии на кнопку приложения пока еще ничего не
        происходит.
        <br />
        Пока у нас есть главный метод программы "main", в котором создастся
        объект окна, и есть класс окна, внутри которого в самом начале объявлены
        четыре переменные класса.
      </p>
      <p className="text">
        Первая "text" типа "JTextArea" - текстовое поле, в которое у нас
        выводится результат. Далее переменные "p1" и "p2" типа "double" (это
        тип, который поддерживает и дробную часть, так как, например, после
        деления мы с вами можем получить дробное число). Переменные "р1" и "p2"
        будут хранить тс значения, которые мы вводим для выполнения над ними
        арифметической операции. Т.е. если пользователь после цифры "1", потом
        нажмет на кнопку "+", эта цифра будет записана в качестве значения
        переменной "р1". А когда пользователь введет второе число, оно будет
        записано в качестве значения переменной "p2". После выполнения
        арифметической операции мы получим результат, который запишем его в
        качестве значения переменной "р1". И четвертая переменная "oper” типа
        "int".
      </p>
      <p className="text">
        То есть каждый раз, мы будем помещать результат в переменную "р1". Зачем
        это необходимо? Для того чтобы пользователь мог продолжить выполнение
        арифметических операций. Например, сначала он выполнил сложение двух
        чисел, затем захотел выполнить еще одну операцию с полученным
        результатом. Вот поэтому каждый раз мы будем помещать результат снова в
        переменную "р1" - она будет содержать результат предыдущего ‘шага
        вычислений.
      </p>
      <p className="text">
        Для хранения выбранной пользователем операции булем использовать
        переменную под названием "oper". Если пользователь, выберет операцию
        сложение ("+"), то значение переменной будет равно 1. Всего эта
        переменная может принимать одно из четырех значений: 1, 2, 3, 4. Эти
        цифры обозначают сложение, вычитание, умножение и деление
        соответственно.
      </p>
      <p className="text">
        Вспомним, когда мы создавали кнопки, то к каждой из них мы подключали
        обработчик событий, и прописывали вызов одного метода под названием
        "btnClick()”, Мы это сделали для того, чтобы не прописывать обработку
        событий для каждой кнопки, а внутри одного метода обрабатывать нажатие
        на любую кнопку калькулятора. В метод "btnClick()” мы передаем параметр,
        поэтому у него в скобках установлен параметр типа "JButton” с названием
        "btn", то есть мы в Этот метод передаем ту кнопку, которую нажал
        пользователь, з точнее данные об этой кнопке. Таким образом, внутри
        метода "btnClick()” мы всегда можем определить, какую именно кнопку
        нажал пользователь, и в зависимости от этого заполнять те или иные
        действия.
      </p>
      <p>
        Метод "actionPerformed()" срабатывает при нажатии на кнопку, и через его
        аргумент под названием "t" типа "ActionEvent" мы можем определить, какая
        конкретно кнопка была зала, поэтому мы передаем параметры "e". Метод
        "getSource()" позволяет получить нажатую кнопку и передает информацию об
        этой кнопке методу "btnClick()".
      </p>
      <p>
        Перейдем к методу "btnClick()". Этот метод как раз и реализует весь
        основной программный функционал калькулятора. Первое, что мы © вами
        добавим, мы создадим переменную "str" типа "String" (строкового типа). В
        эту переменную мы будем возвращать Имя кнопки, которую нажал
        пользователь. Сделать это можно с помощью метода "getText()",
        обратившись к переменной "btn" ("btn" - это как раз та кнопка, которую
        нажал пользователи).
      </p>
      <p>
        Сначала опишем действие для кнопки "Выход", по которой осуществляется
        выход из программы. Выход из программы можно организовать с помощью
        команды System.exit(0). Параметр "0" означает, что выход нормальный, не
        аварийный. Для проверки условия нажатия на кнопку воспользуемся условным
        оператором if. Проверять будем значение переменной "str". Мы получим
        следующую алгоритмическую конструкцию: "Если str=="Выход", тогда нужно
        выйти из программы, выполнив команду System.exit(0).
      </p>
      <p>
        В ветке "Иначе Если" - "else if..." опишем действие для следующей кнопки
        "С" (Очищение окна результата). Очистить поле можно при помощи метода
        "setText()”. Этот метод позволит вывести любой текст, указанный в
        круглых скобках в необходимое поле. Нам нужно чтобы в текстовом поле
        результата было пусто. Пустая строка вводится при помощи двух кавычек -
        "". Переменным "p1" и "р2" нам нужно присвоить значение "0".
      </p>
      <p>
        Следующим условием, которое нам необходимо будет проверить — нажатие на
        кнопку Это действие свидетельствует о том, что пользователь уже ввел
        числа, над которыми нужно совершить операцию. Нам нужно считать из
        текстового поля данные, введенные пользователем. В текстовое поле
        вводятся строковые значения. Нам нужно эти значения преобразовать в
        числа (арифметические операции производятся над числами). Для
        преобразования значений можно воспользоваться командой "parseInt". В
        скобках указывается то значение, которое нужно преобразовать в другой
        тип. Перед вызовом этой команды указывается наименование того типа, в
        который нужно перевести значение:
      </p>
      <p>
        После преобразования нам нужно узнать, какую операцию выбрал
        пользователь. Номер выбранной операции хранит переменная "oper". Если
        она равна "1", нам нужно выполнить сложение, Результат нам нужно вернуть
        в текстовое поле. Результатом выполнения операции будет число. Значит,
        нам нужно будет выполнить обратную операцию — преобразовать число, в
        строку. Сделать это можно с помощью неявного преобразования — прибавив к
        пустой строке число.
      </p>
      <p>
        В этот же момент в переменную "1" нужно поместить число, которое ввел
        пользователь. Но пользователь ввел значение в текстовое поле,
        следовательно, нам нужно преобразовать текстовое значение в числовое.
        Как вы помните, в переменную "р1" мы будем помещать результат выполнения
        операции. Результатом выполнения деления редко когда является целое
        число. Поэтому тип Integer нам не подойдет. Мы воспользуемся другим
        типом — Double . Значение в этот тип будем преобразовывать с помощью
        метода "parseDouble()". Таким образом, значение переменной "р1" будет
        равным.
      </p>
      <p>
        Дальше нам нужно подготовить поля для ввода второго значения. Очищать
        его будем с помощью команды setText():
      </p>

      <p>
        Аналогичным образом будут записаны команды для остальных трех
        арифметических операций.
      </p>
      <p>
        Нам осталось определить команды, которые должны срабатывать, если
        пользователь нажал одну из цифр: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. В этом
        случае нет необходимости для каждой цифры прописывать отдельную
        конструкцию "else if" - команды мы запишем в ветке "else". Команды ветки
        "else" срабатывают в том случае, если не выполнилась ни одиа из
        вышеперечисленных конструкций.
      </p>
      <p>
        Если пользователь нажал цифру, тогда мы должны отобразить се в текстовом
        поле. Причем каждую следующую выбранную цифру нужно отображать в конце.
        Т. е. каждую новую цифру мы "приклеиваем" к предыдущей справа. Например,
        нам нужно ввести число 215. Значит, нам нужно сначала нажать цифру 2,
        затем 1 (получится 21), в затем цифру 5.
      </p>
      <p>
        Вспомним, что название кнопки у нас хранит переменная "str". Как только
        пользователь нажмет на какую-либо цифру, например, 2, это значение
        должно быть записано в переменную "str". Т.e. к пустому значению мы
        прибавляем символ 2. Получить введенный символ нам поможет команда
        getText().
      </p>
      <p>
        На следующем шаге мы должны к уже имеющемуся значению приписать справа
        новую цифру. Поможет нам в этом специальная операция "склеивания"
        строковых выражений, которая называется операцией конкатенации. Эта
        операция обозначается знаком "+", так же как и операция сложения для
        чисел.
      </p>
      <p>
        Для того чтобы программа воспринимала знак "+" как операцию конкатенации
        - мы должны в качестве первого слагаемого записать обязательно строку. В
        противном случае она сама может преобразовать значение текстового поля в
        число (совершить так называемое неявное преобразование). В качестве
        первого слагаемого мы поставили пустую строку. Число, введенное
        пользователем нужно вернуть в это же поле. Для этого воспользуемся
        командой setText().
      </p>
    </div>
  );
}

export default Calculator;
