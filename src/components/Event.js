import React from "react";
import ReactPlayer from "react-player";

function Event() {
  return (
    <div className="body">
      <h1 className="title">Обработка событий</h1>
      <ReactPlayer
        height="500px"
        width="100%"
        controls="true"
        url="https://www.youtube.com/watch?v=vRQCQRXb6_0"
      />
      <h3 className={"subtitle"}>Материал к видео:</h3>
      <p className="text">
        На этом занятии мы рассмотрим, как в приложениях, написанных на языке
        java, можно использовать такой элемент управления, как мышь. У него есть
        следующие характеристики:
      </p>
      <p className="text">
        * Курсор мыши (т, е. его вид), По умолчанию курсор мыши представлен в
        виде стрелочки,но при желании может измениться программно на другое
        изображение: на любой из стандартных курсоров, которые предоставляются
        нам операционной системой, на свою картинку, небольшое изображение,
        которое будет являться курсором мыши. * Клавиши мыши: левая клавиша мыши
        часто используется для того, чтобы что-то открыть (двойной щелчок мыши
        на ярлык программы на рабочем столе позволяет запустить программу) или
        захватить (при нажатой левой клавише мы можем перемещать объект по
        экрану (например, окно программы).
      </p>
      <p className="text">
        * Клавиши мыши: правая клавиша мыши часто используется, чтобы открыть
        так называемое контекстное меню (ото меню содержит основные, наиболее
        часто используемые команды).
      </p>
      <p className="text">
        * Клавиши мыши: средняя клавиша мыши иногда присутствует у данного
        устройства и имеет функционал, сходный с левой клавишей.
      </p>
      <p className="text">
        * Колесико прокрутки используется для быстрого просмотра страниц
        программы.
      </p>
      <p className="text">
        * Положение курсора мыши на экране, которое характеризуется двумя
        составляющими — координатами курсора и расстоянием от верхней левой
        угловой точки экрана (отступ в пикселях).
      </p>
      <p className="text">
        События в программировании, как и события реального мира - это
        какие-либо операции, происходящие в установленное время (установленное
        время - это не конкретное время с точки зрения часов, это просто отклики
        на какие-то другие действия и изменения). События присущи объектно-
        ориентированному программированию и являются одной из важных черт
        операционной системы Windows. Работа программ с визуальным (графическим)
        интерфейсом системы немыслима без событий. Набор команд. которые
        выполняются при вызове события, называется обработчиком событий.
      </p>
      <p className="text">
        Чтобы открыть новый проект, необходимо открыть среду разработки Eclipse,
        выполнить команды: Файл -> Создать -> Проект Java, указать номер урока,
        в данном случае lesson13 и нажать на кнопку Готово, Появится папка под
        названием lesson13. Наведите на неё курсор мыши, нажав правую клавишу,
        выполните команду Создать -> Класс. Далее следует назвать будущую
        программу prog13, установить галочку public static void main
      </p>
      <p className="text">
        Далее необходимо подключить следующие библиотеки: <br />
        Библиотека "javax.swing.*" позволяет нам работать с окнами JFrame и
        позволяет создать окно нашего приложения. Библиотека "java.awt”
        позволяет работать с элементами окон и с элементами графики, которая
        воспроизводится внутри окна. Библиотека "java.awt.event*" позволяет
        работать с обработчиками событий. Например, обработка событий мыши,
        клавиатуры, позволяет работать с таймером и др.
      </p>
      <p className="text">
        Создадим окно на основании класс, который будет описан чуть чуть ниже.
        Назовем этот класс "okno". Переменная» соответствующая данному объекту
        будет иметь тип
        <br />
        Window:
        <p className={"text"}>okno window = new okno();</p>
        Создадим класс под названием "okno" (под основным классом). Этот класс
        наследуется от класса JFrame. JFrame — это класс окно, которое
        используются в наших и приложениях. Напомним, что наследование одного
        класса от другого определяется служебным словом "extends". У нас
        появился следующий участок программного кода:
        <p className="text">class okno extends JFrame</p>
        Теперь создадим конструктор, класса. Напомним, что имя конструктора
        всегда совпадает с именем класса, а сам, конструктор срабатывает при
        создании объекта. В этом конструкторе следует описать характеристики
        окна. Определим его расположение и размеры. Сделать это можно с помощью
        метода "setBounds". У ‘данного метода существуют четыре параметра:
        первые два — это координаты расположения окно (верхней левой точки окна)
        следующие два - это ширина и высота окна. Таким образом, строка
        программного кода
        <p className="text">setBounds(0,0,800,600);</p>
        означает, что окно будет располагаться, начиная с верхней левой угловой
        точки, ширина окна 800, а высота 600 пикселей.
        <br />
        При помощи метода "setTitle" можно указать заголовок окна — название,
        которое будет выводиться в верхней части. Наше окно можно будет назвать,
        например, "Управление приложением с помощью “мыши”. Получится следующая
        строка программного кола:
        <p className="text">
          setTitle(“Управление приложением с помощью мыши”);
        </p>
        <p className="text">
          Добавим панель для нашего окна. Создадим еще один класс, объекты
          которого будут иметь тип переменной "panel". Класс будет описан ниже,
          а мы с вами продолжим описывать класс "okno”, и создадим объект типа
          "panel”. У нас получится следующая, строка программного кода:
          <p className={"text"}>panel = new panel();</p>
        </p>
        <p>
          Теперь свяжем окно © панелью. Для этого создадим переменную типа
          "container", которая и позволит связать окно с панелью, При помощи
          метода getContentPane можно получить содержимое окна JFrame, а при
          помощи метода add добавить панель, "вложить" ее в окно
          <p className={"text"}>
            Container con = getContentPane();
            <br />
            con.add(pan);
          </p>
          Создадим класс с названием "panel", Класс наследуется от класса
          JPanel! — от класса панелей окна. И именно внутри класса JPanel будут
          реализованы те самые элементы трафики, которые должны присутствовать в
          нашем графическом редакторе.
        </p>
        <p className={"text"}>Добавим метод в конструктор класса setVisible</p>
      </p>
      <p className={"text"}>
        Создадим массив, в котором будет храниться список цветов, использующихся
        в нашем приложении. Назовем массив "masColor”. Массив будет типа
        "Color[]". Напомним, что квадратные скобки говорят о том, что это
        массив.
      </p>
      <p className={"text"}>
        Теперь создадим переменную tCol, задав ей начальное значение 0.
        <br />В этой переменной будет храниться номер цвета, который выбрал
        пользователь:
        <p className="text">int tCol = 0;</p>
        Введем две переменные под названием шХ и и, в которых будут храниться
        координаты курсора мыши: <p className={"text"}>int mX, mY;</p>
      </p>
      <p className={"text"}>
        Создадим переменную "flag" логического типа "boolean”. Переменная будет
        принимать два значения: "true" ("истина"), если пользователь рисует, и
        "false" ("ложь") — в противном случае. Присвоим ей начальное значение
        "false".
      </p>
      <p className={"text"}>
        В классе panel нам понадобится метод paintComponent, при помощи которого
        можно будет производить рисование на нашей панели. В круглых скобках
        создадим переменную типа "graphics" с именем "GR", через которую будет
        происходить отображение тех элементов, которые должны присутствовать на
        нашей панели.
      </p>
      <p className={"text"}>
        Далее создадим функционал, позволяющий реализовать обработку событий для
        мыши. Для работы с мышью используются специальные обработчики. Списки
        таких обработчиков можно найти в литературе по языку Java, на различных
        сайтах, посвященных данному языку программирования.
      </p>
      <p className={"text"}>
        mouseClicked — срабатывает при щелчке по кнопке мыши;
        <br />
        mousePressed — срабатывает при нажатии на кнопку мыши;
        <br />
        mouseReleased — срабатывает, если пользователь отпускает клавишу мыши:
        <br />
        mouseEntered — срабатывает при появлении курсора на панели окна; <br />
        mouseExited — срабатывает, если курсор выходит за пределы окна.
      </p>
      <p className={"text"}>
        Если обратиться к переменной "e" и воспользоваться оператором ".", можно
        увидеть, список методов. Среди этих методов следует выбрать метод getX()
        - положение в пикселях от курсора мыши, то есть отступ сго от левой
        части экрана. В этой же строчке следует поставить знак +”, прибавив к
        getY() несколько пробелов, заключенных в кавычки (в этом случае
        образуется отступ при выведении на экран, и смотреть будет удобнее).
        Теперь еще раз обратимся к переменной "e" и, снова воспользовавшись
        оператором "." ‚ выберем метод. getY() - отступ от верхней части экрана
        в пикселях.
      </p>
      <p className={"text"}>
        Создадим в конструкторе два объекта
        <p>
          addMouseListener(new myMouse1());
          <br />
          addMouseMotionListener(new myMouse2());
        </p>
      </p>
      <p className={"text"}>
        Создадим массив под названием masColor, который будет состоять из семи
        элементов — объектов класса Color.
      </p>
      <p className={"text"}>
        Приступим к созданию палитры цветов. Запишем служебное слово for, а в
        круглых скобках укажем параметры счетчика цикла. Наши цветовые фрагменты
        будут иметь номера 0, 1, 2, 3, 4, 5, 6. Следовательно, начальное
        значение нашего счетчика будет равно 0.
      </p>
      <p className={"text"}>
        Перейдем к написанию команд в теле цикла. У каждого нового
        прямоугольника ивет будет другим. Таким образом, мы ‘будем менять цвет
        внутри цикла. Сделать это можно при помощи метода setColor() в скобках в
        качестве параметра указывается нужный цвет), Цвет следует взять из
        массива цветов, который мы определяли выше. Цвет хранится в массиве, в
        ячейке с определенным индексом. Чтобы обратиться к тому или иному
        значению цвета, запишем наименование массива, а в квадратных скобках
        укажем нужный индекс. Мы должны обратиться к каждому цвету: сначала к
        значению цвета с индексом 0, потом 1 и так далее до индекса 6. Счетчик
        нашего цикла принимает значения от 0 до 6.
      </p>
      <p className={"text"}>
        Цвет установлен, теперь нарисуем прямоугольник этого вета,
        <br />
        Для рисования прямоугольника воспользуемся методом. ‚fillRect(a,b,c,d),
        который имест четыре параметра:
        <br />
        <p className="text">
          a,b координаты верхней левой точки прямоугольной области.
          <br />
          c - ширина прямоугольной области.
          <br />d - высота прямоугольной области.
        </p>
        <br />
        Предположим, что все цвета палитры будут располагаться в верхнем левом
        углу друг за другом. Таким образом, параметр b=0. Пусть каждый следующий
        прямоугольник смещается в правую сторону от предыдущего на 100 пикселей,
        тогда значение параметра а будет равным /*100. Т.K. i — счетчик цикла, и
        его значение меняется, то параметр а будет принимать значения: 0, 100,
        200, 300, 400, 500 и 600. Ширину прямоугольной области можно сделать
        равной 100 пикселей, высоту 50 пикселей, тогда c=100, d=50.
      </p>
      <p className={"text"}>
        Теперь опишем выбор цвета в палитре. Если пользователь выбрал тот или
        иной цвет, то рисование на экране будет происходить выбранным цветом.
        Это событие нужно обязательно.
      </p>
      <p className={"text"}>
        Для этого воспользуемся переменной flag типа "булево", которая нами была
        определена при создании класса "panel". Если значение переменной flag
        будет равно true , то это свидетельствует о том, что пользователь нажал
        клавишу мыши, рисование в панели окна будет выполняться - в месте
        нахождения курсора отобразится маленький квадрат выбранного цвета. Иначе
        (если значение переменной flag будет равно false — клавиша мыши не
        нажата) рисование не выполняется.
      </p>
      <p className={"text"}>
        Чтобы нарисовать квадрат, нужно запомнить выбранный пользователем цвет,
        Номер выбраного цвета сохраним в переменную tCol. Сам выбранный цвет
        можно получить, обратившись к массиву, указав в квадратных скобках
        переменную tCol: masColor[tCol].
      </p>
      <p className={"text"}>
        Установив цвет, можно нарисовать маленький прямоугольник на экране
        шириной и например, всего три пикселя, с координатами вывода mX и mY
        (это две е. которые были объявлены при создании класса для хранения
        значений текущего положения курсора мыши).
      </p>
      <p className={"text"}>
        Опишем сам процесс рисования в окне графического редактора.
      </p>
      <p className={"text"}>
        Вернемся к обработчикам событий при нажатии клавиши мыши. В первую
        очередь нам понадобиться обработчик mousePressed. Внутри фигурных скобок
        данного метода пока ничего нет — добавим сюда переменные.
      </p>
      <p className={"text"}>
        Первая переменная, tX, будет хранить координату курсора мыши по X. Как
        получить эту координату?
      </p>
      <p className={"text"}>
        Переменная с именем типа "mouseEvent" содержит в себе текущие
        характеристики события: положение курсора мыши, факт нажатия какой-то
        клавиши и др. С помощью переменной этого типа можно определить, какую
        именно клавишу нажал пользователь. В большинстве случаев используется
        мышь с тремя клавишами, нумерация клавиш в этом случае будет такой: 1,
        2, 3 (если пользователь нажимает левую клавишу мыши, то это значит норме
        клавиши нажатой - 1 и т.д.).
      </p>
      <p className={"text"}>
        Чтобы получить значение переменной tХ, следует обратиться к переменной
        е, которая указана как параметр в скобках, и оператором ".", вызвать
        метод getХ() (получить координаты курсора мыши по Х). Координата курсора
        мыши по Х - это отступ от левой части нашего окна, а не от левой части
        экрана (!). Аналогичным образом передаем в переменную tУ вторую
        координату курсора мыши. Таким образом, в обработчике mousePressed.
        <br />
        Следующая переменная под названием "col" будет хранить количество
        нажатий пользователя на клавишу мыши. Получить количество нажатий можно
        с помощью метода getClickCount(): если пользователь нажал на клавишу
        один раз, метод возвратит значение 1, если пользователь сделал двойной
        щелчок мышью, соответственно, будет возвращено значение 2.
      </p>
      <p className={"text"}>
        Предположим, что выбор цвета будет происходить при нажатии на левую
        клавишу мыши, т.е. нужно чтобы значение переменной "btn" равнялось 1.
        Проверим условия, которые должны выполняться, чтобы пользователь мог
        рисовать. Условия следующие: - пользователь выбрал цвет — нажал на
        кнопку мыши, когда ее указатель располагался на одном из цветных
        прямоугольников палитры. Здесь нужно проверить, что координаты мыши
        находятся обязательно внутри области палитры, т.е. должно выполняться
        условие: если tX>0 (tX - это переменная, которая хранит значение
        координаты курсора мыши по Х) . Кроме координаты Х, нужно еще проверить
        и координату Y курсора мыши. Т.к. высота прямоугольников палитры равна
        50, то условия будут следующими: tY > 0. И общее условие, записанное на
        языке Java.
      </p>
      <p className={"text"}>
        Пользователь будет рисовать на рабочем поле графического редактора,
        расположенного ниже палитры цветов. Высота прямоугольника палитры равна
        50. Следовательно‚ рисование возможно, если координата Y положение
        курсора мыши больше 50.
      </p>
      <p className={"text"}>
        Переменной flag присвоим значение "true". Это признак того, что
        пользователь действительно сейчас удерживает левую клавишу мыши и
        рисует. После установки значения переменной flag нужно вызвать метод
        repaint(). Метод repaint() — это перерисовка. Так как перерисовка
        области окна происходит не в постоянном режиме, мы должны ее вызвать
        явно.
      </p>
      <p className={"text"}>
        Метод repaint() вызывает метод paintComponent - как только будет вызван
        repaint(), сразу срабатывает содержимое, описанное внутри метода
        paintComponent.
      </p>
      <p className={"text"}>
        Теперь проанализируем событие, происходящее когда пользователь отпускает
        кнопку мыши. Для описания этого события перейдем в обработчик
        mouseReleased (в обработчик событий при "отпускании" кнопки мыши) и
        переменной flag присваиваем значение "false" Т.е. когда пользователь
        отпустит левую клавишу мыши, значение этой переменной примет значение
        "ложь" и метод paintComponent уже не будет выполнять рисование.
      </p>
      <p className={"text"}>
        Для получения координат указателя мыши, воспользуемся все теми же
        методами: getX() и getY(). Условия попадания курсора мыши в пределы
        палитры мы уже записывали в методе mousePressed, они не изменились (см.
        выше).
      </p>
    </div>
  );
}

export default Event;
