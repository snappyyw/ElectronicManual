import React from "react";
import ReactPlayer from "react-player";

function CreateInterface() {
  return (
    <div className={"body"}>
      <h1 className="title">Создание интерфейса приложения</h1>
      <ReactPlayer
        height="500px"
        width="100%"
        controls="true"
        url="https://www.youtube.com/watch?v=evw7d_A96oE"
      />
      <h3 className={"subtitle"}>Материал к видео:</h3>
      <p>
        На предыдущих занятиях мы создавали интерфейсы пользователя, добавляли
        на форму такие элементы, как текстовые поля, надписи, кнопки. Эти
        элементы являются основными, они присутствуют на любой форме.
      </p>

      <p>Добавлялись они из программного кода.</p>
      <p>
        Например, ля создания кнопки, использовалась переменная типа JButton,
        при помощи неб создавался объект типа JButton, затем задавались
        характеристики этого объекта. Объект добавлялся на панель, панель
        вкладывалась в окно JFrame.
      </p>
      <p>
        При разработке крупных приложений такой подход не очень удобен, уходит
        много, времени на рутинную работу. Приходится задавать разные
        характеристики из программного кода: отступы в пикселях, ширину, высоту
        элементов и т. л.
      </p>
      <p>
        В реальной практике при разработке приложений часто применяются, так
        называемые, визуальные средства разработки, которые позволяют
        автоматизировать некоторые процессы при помощи добавления элементов из
        панели инструментов мышью. Так, например. в панели инструментов
        разработчик может выбрать кнопку, поместить сё на форму, задать при
        помощи мыши сё размеры, и она сразу появится на форме создаваемого
        приложения. Скорость разработки интерфейсов пользователя повышается в
        несколько раз. Познакомимся такими визуальными средами разработки.
      </p>
      <p>
        Откроем среду разработки Eclipse для Java и создадим новый проект.
        Проект назовем lession20 и нажмем кнопку "Готово"
      </p>
      <p>
        Среда разработки Eclipse, кроме создания интерфейса пользователя из
        программного кода, позволяет использовать и визуальные средства
        разработки,
      </p>
      <p>
        Для того чтобы воспользоваться этим функционалом в среде Eclipse ,
        выделим созданный нами проект, нажмём правую клавишу мыши, в контекстном
        меню выберем кнопку "Создать"
      </p>

      <p>
        В появившемся окне, в самом низу, выбираем раздел "Прочее". В
        появившемся окне, в списке разделов открываем раздел Или WindowBuilder.
      </p>
      <p>
        JFrame — это класс окна, мы его многократно использовали. При помощи
        класса’ JFrame создаётся форма окна, выводимая на экран. Нажмем на
        кнопку "Далее", и введем имя, например, prog, нажимаем кнопку "Готово"
      </p>
      <p>
        Эта заготовка предоставляется средой разработки Eclipse как начальный
        каркас для создания приложений. Рассмотрим, из каких элементов она
        состоит.
      </p>
      <p>Появилась начальная заготовка приложения.</p>
      <p>
        Две основные закладки, которые понадобится периодически переключать,
        находятся внизу.
      </p>
      <p>
        С некоторыми мы уже знакомы. Например, с кнопкой JButton в разделе
        Компоненты, Это та самая кнопка, которую мы уже много раз добавляли
        программно. Кроме этого мы видим знакомые нам элементы: JLabel метка или
        надпись; JTextArea — текстовое поле (оно может быть многострочным).
      </p>

      <p>Рассмотрим принцип работы с визуальным редактором.</p>
      <p>
        При помощи мыши выбирается нужный элемент, например, кнопка и помещается
        на форму.
      </p>
      <p>
        В этот момент из соседней закладке в самом низу, левее от закладки
        Design, можно вернуться на программный код.
      </p>
      <p>
        После добавления в визуальном редакторе нового элемента, в программном
        коде автоматически формируются строки программного кода, добавляющие
        кнопку на форму. Эти строки программного кода нам уже знакомы.
      </p>
      <p>
        Ну а теперь напишем первое приложение при помощи визуального редактора:
        <br />
        Создадим текстовую надпись с названием "Введите имя", текстовое поле и
        кнопку. Бели пользователь ничего не ввёл, при нажатии на кнопку будет
        выводиться сообщение "Введите имя!". Если пользователь ввел своё имя,
        будет выдаваться сообщение "Привет!" и имя, указанное пользователем.
      </p>
      <p>
        Создадим эти элементы. Начнем с текстовой надписи JLabel. В центральной
        части раздела Компоненты левой клавишей мыши выбираем JLabel, переводим
        курсор мыши на форму. Нажимаем левую клавишу, надпись фиксируется в
        выбранном месте.
      </p>
      <p>
        Пишем "Введите имя:", нажимаем клавишу "Enter", появляется надпись. Если
        надпись не отображается на форме полностью, увеличим размер элемента.
      </p>
      <p>
        Если необходимо передвинуть элемент на форме, он выделяется рамкой
        щелчком левой клавишей мыши, удерживается мышью при нажатом положении
        клавиши и перемещается в любое место формы. В выбранном месте левая
        клавиша мыши отпускается, и элемент появляется в новом месте.
      </p>
      <p>
        Т.е. создана переменная под названием label, типа JLabel — текстовая
        надпись. В скобках, в двойных кавычках находится запись в формате
        Unicode.
      </p>
      <p>
        Метод setBounds устанавливает размеры надписи. Как обычно, первые 2
        параметра — координаты верхней левой точки: 88 — ширина и 14 — высота. В
        данном случае, это размеры области, внутри которой вписана надпись.
      </p>
      <p>
        Третья строка, при помощи метод add, добавляет данную надпись к панели
        contentPanel
      </p>
      <p>
        Далее, снова переходим на закладку Design и создадим текстовое поле —
        элемент JTextField. После создания перейдем в программный код -
        появились новые строки, которые система опять создала автоматически.
      </p>
      <p>
        Т.о. создан объект JTextField -текстовое поле и помещен в переменную под
        названием textField. При помощи метода setBounds заданы его размеры,
        положение на панели. При помощи метода а этот элемент добавлен к панели
        JPanel.
      </p>
      <p>
        Возвратимся на закладку Design и создадим кнопку. Выбираем элемент
        JButton, размещаем кнопку на форме, задаем ей имя — "Вход".
      </p>
      <p>
        В самом верху, в палитре свойств найдем свойство Virable. Значение этого
        свойства — имя переменной, в которую будет записан наш элемент. По
        умолчанию стоит значение button. Такое наименование было дано средой
        разработки автоматически при создании кнопки в визуальном редакторе
      </p>
      <p>
        Теперь перейдем к программированию кнопки. Чтобы обработать значение,
        введённое пользователем после того, как он нажмет на кнопку "Вход",
        нужно его проанализировать Другими словами нужно написать обработчик
        события (нажатия пользователем на кнопку "Вход"). Что мы сейчас и
        сделаем. В визуальном редакторе обработчики события присутствуют в
        готовом виде. Нажатие на кнопку — основное событие для кнопки, но могут
        присутствовать и другие события.
        <br />
        Запустим программу на исполнение.
      </p>
      <p>
        Перед нами находится окно. Предположим, пользователь нажимает на кнопку
        — это событие. Пользователь наводит курсор на кнопку — это тоже событие,
        событие другого типа. Пользователь убирает курсор с кнопки — это также
        событие, уже третьего типа.
      </p>
      <p>
        Для того, чтобы увидеть список событий, присутствующих у текущего
        элемента формы, его выделить, нажав а него левой клавишей мыши, перейти
        в левую часть, туда, где находятся свойства этого элемента, и нажать
        кнопку. При наведении на нее появляется надпись Show events.Events— это
        и есть обработчики событий.
      </p>
      <p>
        Обработка события при нажатии на кнопку происходит в методе
        actionPerformed. При нажатии на кнопку будуг исполняться команды,
        прописанные в фигурных скобках внутри метода.
      </p>
      <p>
        Вернёмся на время в визуальный конструктор. Вновь выделим кнопку на
        форме и перейдём в левую часть, туда, где находятся свойства и события.
        Откроем закладку action - performed.
      </p>
      <p>
        Здесь прописан номер строки, в которую автоматически вставился
        обработчик события, Щелкнув два раза по номеру строки мы попадем в сам
        обработчик, Теперь перейдём в программный код.
      </p>
      <p>
        Внутри метода actionPerformed необходимо прописать программный код,
        анализирующий данные, введённые пользователем, Программный код
        представлен ниже.
      </p>
      <p>
        Оставим раздел "Свойства". нас интересует свойство, находящееся в
        Variable. Это свойство — textField, имя переменной.
      </p>
      <p>
        Таким образом, для программного обращения к текстовому полю, необходимо
        обратиться к переменной с именем textField, она отвечает за текстовое
        поле. Метод getText позволяет получить текст из текстового поля. Метод
        trim удаляет пробелы справа и слева текста. Это нужно на тот случай,
        если пользователь случайно ввел пробелы до или после введенного текста,
        чтобы не учитывать пробелы.
      </p>

      <p>
        В этой строке при помощи переменной textField мы обращаемся к текстовому
        полю и применяем метод getText. Этот метод получит содержимое текстового
        поля, т. е. надпись введённую пользователем. К полученному значению
        применим метод trim, который срежет пробелы справа и слева. Результат
        запишем в переменную str. Таким образом, в переменную str попадает
        содержимое текстового поля с удалёнными справа и слева пробелами.
      </p>
      <p>
        "Необходимо проверить, заполнено ли текстовое поле пользователем (ввел
        ли он свое имя). Для этого используется конструкция if:
      </p>
      <p>
        В круглой скобке конструкции if обращаясь к переменной str, после
        оператора "точка"(.) в списке доступных методов выберем метод isEmpty.
      </p>
      <p>
        Метод isEmpty определяет будет ли пустой искомая строка. Этот метод
        возвращает значение типа булево. "Истина" — строка пустая, "Ложь" — в
        противном случае. В случае, если метод возвратит истинное значение, при
        помощи диалогового окна, пользователю будет выведена надпись.
      </p>

      <p>
        Для вызова диалогового окна необходимо обратиться к классу JOptionPane.
        С при помощи оператора "точка" (.) выберем метод showMessageDialog.
      </p>
      <p>
        Первый параметр метода showMessageDialog — родительское окно. Укажем
        значение метода — null, т.е. пустой параметр. Считаем, что у нашего
        диалогового окна не будет родительского окна, оно будет выводиться само
        по себе.
      </p>

      <p>
        Второй параметр сообщение в двойных кавычках. Указываем сообщение,
        выводимое пользователю: "Введите имя!"
      </p>
      <p>
        Таким образом, если пользователь ничего не ввёл, ему будет выводиться
        сообщение "Введите имя!
      </p>
      <p>
        У конструкции if может быть продолжение под названием else(иначе).
        Инструкции, помещенные в этот блок срабатывают, если значение условия
        равно "Ложь" (в нашем случае такое значение говорит о том, что строка не
        пуста). Пусть в этом случае (когда пользователь что-то ввёл), выводится
        сообщение: "Привет! " +имя пользователя.
      </p>

      <p>
        Для вывода этого сообщения также будем использовать диалоговое окно
        JOptionPane, поэтому копируем уже созданную строку, вставляем сё в
        конструкцию Иначе, и здесь, в сообщении пишем другой текст: "Привет", и
        прибавляем имя, введённое пользователем (+str).
      </p>
      <p>
        Мы соединили две строки: "Привет" и строку, содержащуюся в переменной
        str, Эта операция называется сложением (склеиванием) строк или
        конкатенацией и обозначается знаком "+" (плюс). После применения этой
        операции получается одна общая строка.
      </p>
      <p>
        Запуск можно делать как с закладки Design, так и из программного кода.
        Если пользователь ничего нс ввёл, или ввёл лишь несколько пробелов,
        появляется диалоговое окно "Введите имя!"
      </p>
      <p>
        Итак, мы написали приложение, используя визуальный редактор. Такое же
        приложение можно было бы написать и без визуального редактора, как мы
        делали ранее, но пришлось бы. вручную прописывать фрагменты программного
        кода, добавляющие элементы на форму, вручную указывать отступы сверху и
        слева, ширину и высоту в пикселях. Эта кропотливая работа с размерами,
        прикреплением элементов к панели и т. д. требует много времени и не
        очень интересна разработчику.
      </p>
      <p>
        Намного удобнее создать элементы в визуальном редакторе и использовать
        их, лишь немного корректируя. Но, для эффективной и грамотной работы,
        нужно иметь хорошие навыки программной работы с элементами, нужно четко
        представлять, как элементы располагаются на форме, и в случае
        необходимости, поменять те или иные значения вручную в программном коде,
        который создает среда разработки автоматически.
      </p>
    </div>
  );
}

export default CreateInterface;
